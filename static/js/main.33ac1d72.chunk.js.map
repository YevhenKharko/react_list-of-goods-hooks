{"version":3,"sources":["App.tsx","components/Good/Good.tsx","index.tsx"],"names":["SortBy","Good","good","goodsFromServer","App","useState","default","sortBy","setSortBy","isReversed","setIsReversed","goods","sortedBy","preparedGoods","sort","goodA","goodB","name","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","map","ReactDOM","render","document","getElementById"],"mappings":"6KAMKA,E,0ECDQC,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnC,oBAAI,UAAQ,OAAZ,SACGA,M,SDDAF,K,kBAAAA,E,YAAAA,E,iBAAAA,M,KAME,IAAMG,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAmCWC,EAAM,WACjB,MAA4BC,mBAASL,EAAOM,SAA5C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAOMC,EAzCiB,SACvBA,EACAC,EACAH,GAEA,IAAII,EAAa,YAAOF,GAwBxB,OAtBIC,GACFC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,GACN,KAAKZ,EAAOiB,KACV,OAAOF,EAAMG,cAAcF,GAE7B,KAAKhB,EAAOmB,OACV,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,KAAKnB,EAAOM,QAGZ,QACE,OAAO,MAKXG,IACFI,EAAgBA,EAAcO,WAGzBP,EAYOQ,CAAiBlB,EAAiBI,EAAQE,GAExD,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAWP,EAAOiB,OAEhCQ,QAAS,kBAAMjB,EAAUR,EAAOiB,OALlC,iCASA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAWP,EAAOmB,SAEhCM,QAAS,kBAAMjB,EAAUR,EAAOmB,SALlC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAaf,IAEfgB,QAAS,kBAAMf,GAAeD,IALhC,sBAUEF,IAAWP,EAAOM,SAAWG,IAC7B,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA1CjBjB,EAAUR,EAAOM,cACjBI,GAAc,IAsCR,sBAUJ,6BACGC,EAAMe,KAAI,SAAAxB,GAAI,OAAI,cAAC,EAAD,CAAiBA,KAAMA,GAAZA,YE7GtCyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.33ac1d72.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { Good } from './components/Good/Good';\n\nenum SortBy {\n  default = 'default',\n  name = 'name',\n  length = 'length',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst getPreparedGoods = (\n  goods: string[],\n  sortedBy: SortBy,\n  isReversed: boolean,\n): string[] => {\n  let preparedGoods = [...goods];\n\n  if (sortedBy) {\n    preparedGoods.sort((goodA, goodB) => {\n      switch (sortedBy) {\n        case SortBy.name:\n          return goodA.localeCompare(goodB);\n\n        case SortBy.length:\n          return goodA.length - goodB.length;\n\n        case SortBy.default:\n          return 0;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortBy, setSortBy] = useState(SortBy.default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const reset = () => {\n    setSortBy(SortBy.default);\n    setIsReversed(false);\n  };\n\n  const goods = getPreparedGoods(goodsFromServer, sortBy, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortBy !== SortBy.name,\n          })}\n          onClick={() => setSortBy(SortBy.name)}\n        >\n          Sort alphabetically\n        </button>\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortBy !== SortBy.length,\n          })}\n          onClick={() => setSortBy(SortBy.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortBy !== SortBy.default || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => <Good key={good} good={good} />)}\n      </ul>\n    </div>\n  );\n};\n","interface Props {\n  good: string;\n  key: string;\n}\n\nexport const Good: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good}\n  </li>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}